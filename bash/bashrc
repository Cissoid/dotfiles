#!/bin/bash
# ================================
# File Name: bashrc
# Author: cissoid
# Created At: 2015-09-01T09:34:00+0800
# Last Modified: 2016-08-17T10:43:03+0800
# ================================

# Source global definitions. {{{
if [ -r /etc/bashrc ]; then
	. /etc/bashrc
elif [ -r /etc/bash.bashrc ]; then
    . /etc/bash.bashrc
fi
# }}}

shopt -s cdspell
# shopt -s dirspell
shopt -s cmdhist
# support for **
shopt -s globstar

# environment variables. {{{

export LC_ALL=en_US.UTF-8
export LC_TYPES=en_US.UTF-8
export LANG=en_US.UTF-8
export TERM=xterm-256color
export PROMPT_DIRTRIM=3

# PS1 settings. {{{
# exit_status
PS1='$(
    exit_code=$?;
    if [ $exit_code -ne 0 ]; then
        printf %s "\[$(tput bold)\]" "\[\033[48;5;160m\]" "[" $exit_code "]" "\[$(tput sgr0)\]";
    fi
)'
# python virtualenv
PS1+='$(
    if [ ! "$VIRTUAL_ENV" == "" ]; then
        venv=`basename $VIRTUAL_ENV`;
        printf %s "(" $venv ")";
    fi
)'
# user, host and directory
PS1+="["
PS1+='$(
    if [ "\u" == "root" ]; then
        color="\[\033[38;5;196m\]";
        colorreset="\[$(tput sgr0)\]";
    else
        color="\[\033[38;5;2m\]";
        colorreset="\[$(tput sgr0)\]";
    fi
    printf %s $color "\u@\h" $colorreset
)'
PS1+=":\[$(tput bold)\]\[\033[38;5;12m\]\w\[$(tput sgr0)\]"
PS1+="]"
# git branch
PS1+='$(
    if [ ! `which git 2>/dev/null` == "" ] && [ "`git rev-parse --is-inside-work-tree 2>/dev/null`" == "true" ]; then
        branch=`git branch | grep -Po "(?<=\\* \\(HEAD detached at )[^\\s]+(?=\\)$)|(?<=\\* )[^\\s]+(?=$)"`;
        changed=`git status -s -uno`;
        if [ "$changed" == "" ]; then
            color="";
            colorreset="";
        else
            color="\[\033[38;5;220m\]";
            colorreset="\[$(tput sgr0)\]";
        fi
        printf %s "(" $color $branch $colorreset ")";
    fi
)'
PS1+="\\$ \[$(tput sgr0)\]"
export PS1
# }}}

# powerline settings. {{{
# export POWERLINE_BASH_CONTINUATION=1
# export POWERLINE_BASH_SELECT=1
# export POWERLINE_INSTALL_PATH
# POWERLINE_INSTALL_PATH=$(pip show powerline-status | grep Location | awk '{print $2}')/powerline
# }}}

export COMPOSER_HOME=$HOME/.composer
# export GOROOT=~/go
export GOPATH=$HOME/env/golang

export PATH=$PATH:$HOME/bin:$GOPATH/bin:$COMPOSER_HOME/vendor/bin
# }}}


if [ "$(uname)" == "Linux" ]; then
    # Linux specific config. {{{
    if ! shopt -oq posix; then
      if [ -r /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
      elif [ -r /etc/bash_completion ]; then
        . /etc/bash_completion
      fi
    fi
    
    # if [ -f "$(which powerline-daemon)" ]; then
    #     flock -xn /tmp/powerline-daemon.lock powerline-daemon -q
    #     . "${POWERLINE_INSTALL_PATH}/bindings/bash/powerline.sh"
    # fi
    # }}}

elif [ "$(uname)" == "Darwin" ]; then
    # OS X specific config. {{{
    HOMEBREW_PREFIX=$(brew --prefix)
    export PATH=$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin:$HOMEBREW_PREFIX/Cellar/gettext/0.19.8.1/bin:$PATH
    export MANPATH=$HOMEBREW_PREFIX/opt/coreutils/libexec/gnuman:$HOMEBREW_PREFIX/Cellar/gettext/share/man:$MANPATH

    if [ -r "$HOMEBREW_PREFIX/etc/bash_completion" ]; then
        . "$HOMEBREW_PREFIX/etc/bash_completion"
    fi

    # if [ -r "$(which powerline-daemon)" ]; then
    #     . "${POWERLINE_INSTALL_PATH}/bindings/bash/powerline.sh"
    # fi
    # }}}
fi

# aliases. {{{
alias cp='cp -i'
alias du1='du --max-depth=1'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'
alias ll='ls -l --color=auto'
alias ls='ls --color=auto'
alias mv='mv -i'
alias rm='rm -i'
alias s='ssh'
# alias tmux='tmux -2'
alias tree1='tree -L 1'

alias man='LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m")        \
    LESS_TERMCAP_me=$(printf "\e[0m")           \
    LESS_TERMCAP_se=$(printf "\e[0m")           \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m")     \
    LESS_TERMCAP_ue=$(printf "\e[0m")           \
    LESS_TERMCAP_us=$(printf "\e[1;32m")        \
    man'

alias pip-upgrade-all='f() {                                                                      \
        exclude_regex="^(0)";                                                                     \
        for package in $*; do                                                                     \
            exclude_regex+="|($package)";                                                         \
        done;                                                                                     \
        exclude_regex+="$";                                                                       \
        pip freeze | grep -Po "(.*)(?=\=\=)" | grep -iPv "$exclude_regex" | xargs pip install -U; \
    }; f'

alias backup='f() { tar -zcvf $1_`date +"%Y%m%d%H%M%S"`.tar.gz $1; }; f'

alias proxycall='http_proxy=http://127.0.0.1:1081 https_proxy=$http_proxy $*'
# }}}
