" ================
" base settings {{{
" ================
" set encoding
set encoding=utf-8
" ================
" }}} end base settings
" ================

" ================
" vundle settings {{{
" ================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
call vundle#begin('~/env/vim/bundle')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'godlygeek/csapprox'
Plugin 'dirdiff.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/syntastic'
Plugin 'jistr/vim-nerdtree-tabs'
" Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'sjl/gundo.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'easymotion/vim-easymotion'
Plugin 'henrik/vim-indexed-search'
" Plugin 'fatih/vim-go'
" Plugin 'jiangmiao/auto-pairs'
Plugin 'raimondi/delimitmate'
Plugin 'mattn/emmet-vim'
Plugin 'wesQ3/vim-windowswap'
" Code highlight
Plugin 'nginx.vim'
Plugin 'solarnz/thrift.vim'
" Theme plugin
Plugin 'tomasr/molokai'
Plugin 'altercation/vim-colors-solarized'
Plugin 'terryma/vim-multiple-cursors'
" Unused
Plugin 'nathanaelkane/vim-indent-guides'
" Plugin 'taglist.vim'
" Plugin 'rking/ag.vim'
" Plugin 'DrawIt.vim'
" Plugin 'bling/vim-airline'
" Plugin 'powerline/powerline'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
" Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" ================
" }}} end vundle settings
" ================

" ================
" plugin settings {{{
" ================

" powerline settings {{{
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup
" }}}

" syntastic settings, this MUST set after powerline settings. {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_c_check_header = 1
let g:syntastic_c_auto_refresh_includes = 1
let g:syntastic_python_checkers = ["flake8"]
let g:syntastic_python_flake8_args = "--ignore=E402,E501"
" let g:syntastic_python_flake8_quiet_messages = {
"     \ "type": "style",
"     \ "regex": "\s(E401)\s"
"     \ }
" }}}

" nerdtree settings {{{
let NERDTreeIgnore = ['\.pyc$', '\~$']
" }}}

" nerdcommenter settings {{{
" Add extra space after comment character.
" let NERDSpaceDelims=1
" }}}

" ctrlp settings {{{
" show window in bottom, and sort from top to bottom.
let g:ctrlp_match_window = 'bottom,order:ttb'
" open match file in new buffer.
let g:ctrlp_switch_buffer = 0
" support change working directory.
let g:ctrlp_working_path_mode = 0
" use ag to speed up.
if executable('ag')
    let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
    let g:ctrlp_use_caching = 0
endif
" }}}

" ycm settings {{{
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_key_invoke_completion = "<Leader>y<Space>"
let g:ycm_key_detailed_diagnostics = "<Leader>yd"
let g:ycm_key_list_select_completion = ["<Tab>","<C-j>"]
let g:ycm_key_list_previous_completion = ["<C-k>"]
let g:ycm_global_ycm_extra_conf = "~/.vim/data/ycm_extra_conf.py"
let g:ycm_confirm_extra_conf = 0
" }}}

" ultisnips settings {{{
let g:UltiSnipsExpandTrigger = "<C-l>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwordTrigger = "<C-k>"
" }}}

" vim-indent-guides settings {{{
" let g:indent_guides_start_level = 0
" }}}

" emmet settings {{{
let g:user_emmet_install_global = 0
" }}}

" indent guide settings {{{
let g:indent_guide_enable_on_vim_startup = 1
let g:indent_guides_guid_size = 1
" }}}

" ================
" }}} end plugin settings
" ================

" ================
" custom settings {{{
" ================
" color setting {{{
syntax enable
" colorful!
set t_Co=256
colorscheme molokai
" set background=dark
" let g:solarized_termcolors=256
" colorscheme solarized
highlight Normal ctermbg=none
" }}}

" ui setting {{{
" always show tab line.
set showtabline=2
" always show status line.
set laststatus=2
" don't show default mode line(above status line).
" set noshowmode
" show line number.
set number
" show command in bottom bar, no use for powerline.
set showcmd
" highlight current line.
set cursorline
" show a menu for filename autocomplete.
set wildmenu
" lazy redraw.
set lazyredraw
" show the matching part of the pair for [] {} and ()
set showmatch
" set text width
set textwidth=0
" highlight the long text
set colorcolumn=80,120
set ruler
" }}}

" gui setting {{{
if has("gui_running")
    set guifont=Ubuntu\ Mono\ derivative\ Powerline:h16
    set guioptions=
endif
" }}}

" tab & space setting. {{{
" number of visual spaces for tab.
set tabstop=4
" number of actual spaces for tab.
set softtabstop=4
" make << or >> step 4 spaces.
set shiftwidth=4
" convert tab to spaces.
set expandtab
" auto indent.
set autoindent
" }}}

" search setting. {{{
" highlight matches.
set hlsearch
" search ignore case.
set ignorecase
" incremantal search.
set incsearch
" }}}

" folding setting {{{
" enable fold
set foldenable
" fold based on indent level.
set foldmethod=indent
" 10 fold when open file.
set foldlevelstart=10
set foldlevel=99
" 10 nest fold max.
set foldnestmax=10
" }}} 

" OSX seems don't have own backspace setting.
set backspace=indent,eol,start

" ================
" }}} end custom settings
" ================

" ================
" keymap settings {{{
" ================
" let mapleader=","

" nmap {{{
" hard mode
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
" move vertically by visual line
nnoremap j gj
nnoremap k gk
" space = toggle folding.
nnoremap <Space> za
" highlight last inserted text
" nnoremap gV `[v`]
" actually it map to Ctrl+/. See
" http://stackoverflow.com/questions/9051837/how-to-map-c-to-toggle-comments-in-vim.
" nmap <C-_> <Plug>NERDCommenterToggle
"
" nnoremap <Leader>s :mksession<CR>
" nnoremap <Leader>a :Ag 
nnoremap <Leader>ev :vsplit $MYVIMRC<CR>
" reopen .vimrc after source, otherwise filetype specific settinsg will not
" work.
nnoremap <Leader>sv :source $MYVIMRC<CR>:q<CR>
" nnoremap <C-n> :tabnew<CR>

nnoremap J <C-d>
nnoremap K <C-u>

nnoremap <Leader>% :vsplit<CR>
nnoremap <Leader>" :split<CR>

nnoremap <Leader>b :b
nnoremap <Leader>bn :bn<CR>
nnoremap <Leader>bp :bp<CR>

nnoremap <Leader>fa :call Reformat()<CR>

nnoremap <Leader>u :GundoToggle<CR>
nnoremap <Leader>n :NERDTreeTabsToggle<CR>
nnoremap <Leader>t :TagbarToggle<CR>
nnoremap <Leader>yg :YcmCompleter GoTo<CR>
nnoremap <Leader>yt :YcmCompleter GetType<CR>
nnoremap <Leader>yd :YcmCompleter GetDoc<CR>
" }}}

" imap {{{
" hard mode
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Esc> <Nop>
inoremap jk <Esc>

inoremap <Leader>yt :YcmCompleter GetType<CR>
" }}}
" ================
" }}} end keymap settings
" ================

" ================
" filetype specific settings. {{{
" move these config into ftplugin folder seems better, but not necessary for me
" now.
" ================
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker foldlevel=0
    autocmd FileType vim let g:NERDSpaceDelims = 1
augroup END

augroup filetype_python
    autocmd!
    " enable all Python syntax highlighting features
    autocmd FileType python let python_highlight_all = 1
    autocmd FileType python setlocal formatprg=autopep8\ \-
    autocmd FileType pyrex setlocal formatprg=autopep8\ \-
    " autocmd BufWritePre *.py call Reformat()
augroup END

augroup filetype_clang
    autocmd!
    autocmd FileType c,cpp setlocal formatprg=clang\-format\ \-style=\"\{BasedOnStyle:\ Google,\ IndentWidth:\ 4\}\"
    autocmd BufWritePre *.h,*.c,*.cpp call Reformat()
augroup END

augroup filetype_golang
    autocmd!
    autocmd FileType go setlocal formatprg=gofmt
    autocmd FileType go nnoremap <F9> :Shell build %<CR>
    autocmd FileType go nnoremap <F10> :Shell go run %<CR>
    autocmd BufWritePre *.go call Reformat()
augroup END

augroup filetype_html
    autocmd!
    autocmd FileType html,css EmmetInstall
    autocmd FileType html setlocal formatprg=js\-beautify\ \-\-type\ html
    autocmd FileType css setlocal formatprg=js\-beautify\ \-\-type\ css
augroup END

augroup filetype_javascript
    autocmd!
    autocmd FileType javascript setlocal formatprg=js\-beautify
    autocmd BufWritePre *.js call Reformat()
augroup END

" ================
" }}}
" ================

" ================
" Custom functions. {{{
" ================
function! Reformat()
    " mark current location
    execute "normal! mm"
    " format all
    execute "normal! gggqG"
    " move cursor back
    execute "normal! 'm"
    " center current line
    execute "normal! zz"
endfunction

" capture shell output and display in a window.
function! s:ExecuteInShell(command)
    let command = join(map(split(a:command), 'expand(v:val)'))
    let winnr = bufwinnr('^' . command . '$')
    silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
    setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
    echo 'Execute ' . command . '...'
    silent! execute 'silent %!'. command
    silent! execute 'resize ' . max([line('$'), 5])
    silent! redraw
    silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
    " silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
    echo 'Shell command ' . command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)
" ================
" }}}
" ================

" comment this because augroup seems better, modelines should use in specific
" file, IMO.
" set modelines=1
" vim:foldmethod=marker foldlevel=0
