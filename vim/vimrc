" ================
" File Name: .vimrc
" Author: Cissoid
" Created At: 2015-07-09 13:42:00
" Last Modified: 2016-05-04 14:06:28
" ================

" ================
" base settings {{{
" ================
" If set, use some more excellent extensions, but maybe unusable in server
" environment.
let s:enhanced = 1
" Add filetypes which could be formatted, so that Reformat() will take
" effects.
let s:format_filetypes = []
" set encoding
set encoding=utf-8
" ================
" }}} end base settings
" ================

" ================
" vundle settings {{{
" ================
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
call vundle#begin('~/env/vim/bundle')

" let Vundle manage Vundle, required
" Common
Plugin 'VundleVim/Vundle.vim'

Plugin 'a.vim'
Plugin 'dirdiff.vim'

if s:enhanced
    Plugin 'scrooloose/nerdtree'
    Plugin 'scrooloose/nerdcommenter'
    Plugin 'scrooloose/syntastic'
    Plugin 'jistr/vim-nerdtree-tabs'
    Plugin 'majutsushi/tagbar'
    Plugin 'sjl/gundo.vim'
    Plugin 'ctrlpvim/ctrlp.vim'
    Plugin 'tpope/vim-surround'
    Plugin 'easymotion/vim-easymotion'
    Plugin 'terryma/vim-multiple-cursors'
    Plugin 'tpope/vim-fugitive'
    Plugin 'henrik/vim-indexed-search'
    Plugin 'raimondi/delimitmate'
    " Plugin 'jiangmiao/auto-pairs'
    Plugin 'nathanaelkane/vim-indent-guides'
    Plugin 'wesQ3/vim-windowswap'
    Plugin 'Valloric/YouCompleteMe'
    Plugin 'SirVer/ultisnips'
    Plugin 'vimwiki/vimwiki'
endif

" Language specific
" Plugin 'fatih/vim-go'
Plugin 'nginx.vim'
Plugin 'solarnz/thrift.vim'

if s:enhanced
    Plugin 'mattn/emmet-vim'
endif

" Theme plugin
Plugin 'tomasr/molokai'
Plugin 'google/vim-colorscheme-primary'
" Plugin 'altercation/vim-colors-solarized'

" Unused
" Plugin 'godlygeek/csapprox'
" Plugin 'taglist.vim'
" Plugin 'rking/ag.vim'
" Plugin 'DrawIt.vim'
" Plugin 'bling/vim-airline'
" Plugin 'powerline/powerline'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
" Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" ================
" }}} end vundle settings
" ================

" ================
" plugin settings {{{
" ================

" powerline settings {{{
if s:enhanced
    python from powerline.vim import setup as powerline_setup
    python powerline_setup()
    python del powerline_setup
endif
" }}}

" syntastic settings, this MUST set after powerline settings. {{{
if s:enhanced
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    " let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0

    let g:syntastic_c_check_header = 1
    let g:syntastic_c_auto_refresh_includes = 1
    let g:syntastic_python_checkers = ['flake8']
    " let g:syntastic_python_flake8_args = '--ignore=E402,E501'
    " let g:syntastic_python_checkers = ["pylint"]
    " let g:syntastic_python_pylint_post_args = '--msg-template="{path}:{line}:{column}:{C}: [{symbol} {msg_id}] {msg}"'
    " let g:syntastic_python_pylint_args = '--disable=C0103,C0111,C0411,C0412,C0413,R0201'
    " let g:syntastic_python_flake8_quiet_messages = {
    "     \ 'type': 'style',
    "     \ 'regex': '\s(E401)\s'
    "     \ }
endif
" }}}

" nerdtree settings {{{
if s:enhanced
    let NERDTreeIgnore = ['\.pyc$', '\~$']
endif
" }}}

" nerdcommenter settings {{{
if s:enhanced
    " Add extra space after comment character.
    let NERDSpaceDelims = 1
    let NERDRemoveExtraSpaces = 1
    let g:NERDCustomDelimiters = {
        \ 'python': {'left': '#', 'leftAlt': '#'}
        \ }
endif
" }}}

" ctrlp settings {{{
if s:enhanced
    " show window in bottom, and sort from top to bottom.
    let g:ctrlp_match_window = 'bottom,order:ttb'
    " open match file in new buffer.
    let g:ctrlp_switch_buffer = 0
    " support change working directory.
    let g:ctrlp_working_path_mode = 0
    " use ag to speed up.
    if executable('ag')
        let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
        let g:ctrlp_use_caching = 0
    endif
endif
" }}}

" ycm settings {{{
if s:enhanced
    let g:ycm_min_num_of_chars_for_completion = 1
    let g:ycm_complete_in_comments = 1
    let g:ycm_complete_in_strings = 1
    let g:ycm_collect_identifiers_from_comments_and_strings = 1
    let g:ycm_seed_identifiers_with_syntax = 1
    let g:ycm_autoclose_preview_window_after_completion = 1
    let g:ycm_key_invoke_completion = '<Leader>y<Space>'
    let g:ycm_key_detailed_diagnostics = '<Leader>yd'
    let g:ycm_key_list_select_completion = ['<Tab>', '<C-j>']
    let g:ycm_key_list_previous_completion = ['<C-k>']
    let g:ycm_global_ycm_extra_conf = '~/.vim/data/ycm_extra_conf.py'
    let g:ycm_confirm_extra_conf = 0
endif
" }}}

" ultisnips settings {{{
if s:enhanced
    let g:UltiSnipsExpandTrigger = '<C-l>'
    let g:UltiSnipsJumpForwardTrigger = '<C-l>'
    let g:UltiSnipsJumpBackwordTrigger = '<C-h>'
endif
" }}}

" vim-indent-guides settings {{{
" let g:indent_guides_start_level = 0
let g:indent_guide_enable_on_vim_startup = 1
let g:indent_guides_guid_size = 1
" }}}

" emmet settings {{{
if s:enhanced
    let g:user_emmet_install_global = 0
endif
" }}}

" tagbar settings {{{
if s:enhanced
    let g:tagbar_sort = 0
endif
" }}}

" windowswap settings {{{
if s:enhanced
    let g:windowswap_map_keys = 0
endif
" }}}

" vimwiki settings {{{
if s:enhanced
    let g:vimwiki_list = [
        \ {'path': '~/Dropbox/Personal/wiki/', 'syntax': 'markdown', 'ext': '.md', 'auto_toc': 1}
        \ ]
endif
" }}}

" ================
" }}} end plugin settings
" ================

" ================
" custom settings {{{
" ================
" color setting {{{
syntax enable
" colorful!
set t_Co=256
colorscheme molokai
" set background=dark
" let g:solarized_termcolors=256
" colorscheme solarized
highlight Normal ctermbg=none
" }}}

" ui setting {{{
" always show tab line.
set showtabline=2
" always show status line.
set laststatus=2
" don't show default mode line(above status line).
set noshowmode
" show line number.
set number
" show command in bottom bar, no use for powerline.
set showcmd
" highlight current line.
set cursorline
set cursorcolumn
" show a menu for filename autocomplete.
set wildmenu
" lazy redraw.
set lazyredraw
" show the matching part of the pair for [] {} and ()
set showmatch
" set text width
set textwidth=0
" highlight the long text
set colorcolumn=80,120
set ruler
" }}}

" gui setting {{{
if has('gui_running')
    if has('macunix')
        set guifont=Ubuntu\ Mono\ derivative\ Powerline:h16
        set guioptions=
    elseif has('unix')
        set guifont=Ubuntu\ Mono\ 12
        set guioptions=
    endif

endif
" }}}

" tab & space setting. {{{
" number of visual spaces for tab.
set tabstop=4
" number of actual spaces for tab.
set softtabstop=4
" make << or >> step 4 spaces.
set shiftwidth=4
" convert tab to spaces.
set expandtab
" auto indent.
set autoindent
" }}}

" search setting. {{{
" highlight matches.
set hlsearch
" search ignore case.
set ignorecase
" incremantal search.
set incsearch
" }}}

" folding setting {{{
" enable fold
set foldenable
" fold based on indent level.
set foldmethod=indent
" 10 fold when open file.
set foldlevelstart=10
set foldlevel=99
" 10 nest fold max.
set foldnestmax=10
" }}} 

" OSX seems don't have own backspace setting.
set backspace=indent,eol,start

" ================
" }}} end custom settings
" ================

" ================
" keymap settings {{{
" ================
" let mapleader=","

" nmap {{{
" hard mode
nnoremap <Left> <Nop>
nnoremap <Right> <Nop>
nnoremap <Up> <Nop>
nnoremap <Down> <Nop>
" move vertically by visual line
nnoremap j gj
nnoremap k gk
" space = toggle folding.
nnoremap <Space> za
" highlight last inserted text
" nnoremap gV `[v`]
" actually it map to Ctrl+/. See
" http://stackoverflow.com/questions/9051837/how-to-map-c-to-toggle-comments-in-vim.
" nmap <C-_> <Plug>NERDCommenterToggle
"
" nnoremap <Leader>s :mksession<CR>
" nnoremap <Leader>a :Ag 
nnoremap <Leader>ev :vsplit $MYVIMRC<CR>
" reopen .vimrc after source, otherwise filetype specific settinsg will not
" work.
nnoremap <Leader>sv :w<CR>:source $MYVIMRC<CR>:q<CR>
" nnoremap <C-n> :tabnew<CR>

nnoremap <S-j> <C-d>
nnoremap <S-k> <C-u>
nnoremap <C-j> j<C-e>
nnoremap <C-k> k<C-y>

nnoremap <Leader>% :vsplit<CR>
nnoremap <Leader>" :split<CR>

nnoremap <Leader>p :set paste!<CR>
nnoremap <Leader>at :call s:ManualAddFileTemplate()<CR>

if s:enhanced
    nnoremap <Leader>n :NERDTreeTabsToggle<CR>
    nnoremap <Leader>u :GundoToggle<CR>
    nnoremap <Leader>t :TagbarToggle<CR>
    nnoremap <Leader>sw :call WindowSwap#EasyWindowSwap()<CR>
    nnoremap <Leader>yg :YcmCompleter GoTo<CR>
    nnoremap <Leader>yt :YcmCompleter GetType<CR>
    nnoremap <Leader>yd :YcmCompleter GetDoc<CR>
    nnoremap <Leader>w<Space> :VimwikiToggleListItem<CR>
    nnoremap <Leader>fa :call Reformat()<CR>
endif
" }}}

" imap {{{
" hard mode
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Esc> <Nop>
inoremap jk <Esc>

if s:enhanced
    inoremap <Leader>yt :YcmCompleter GetType<CR>
endif
" }}}

" vmap {{{
vnoremap <Left> <Nop>
vnoremap <Right> <Nop>
vnoremap <Up> <Nop>
vnoremap <Down> <Nop>
vnoremap <Esc> <Nop>
vnoremap jk <Esc>
" }}}
" ================
" }}} end keymap settings
" ================

" ================
" filetype specific settings. {{{
" move these config into ftplugin folder seems better, but not necessary for me
" now.
" ================

augroup filetype_dotfiles
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker foldlevel=0
    autocmd BufWritePre .vimrc,vimrc call s:UpdateFileTemplate()

    autocmd BufWritePre .gitconfig,gitconfig call s:UpdateFileTemplate()
augroup END

augroup filetype_python
    autocmd!
    " enable all Python syntax highlighting features
    autocmd FileType python let python_highlight_all = 1
    autocmd BufNewFile *.py call s:AddFileTemplate('python')
    autocmd BufWritePre *.py call s:UpdateFileTemplate()

    if s:enhanced
        call s:AddReformatLang(['python', 'pyrex'])
        autocmd FileType python,pyrex setlocal formatprg=autopep8\ \-
        " autocmd BufWritePre *.py call Reformat()
    endif
augroup END

augroup filetype_make
    autocmd!
    autocmd BufNewFile Makefile call s:AddFileTemplate('make')
augroup END

augroup filetype_cmake
    autocmd!
    autocmd BufNewFile,BufReadPre CMakeLists.txt setlocal filetype=cmake
    autocmd BufNewFile CMakeLists.txt call s:AddFileTemplate('cmake')
    autocmd BufWritePre CMakeLists.txt call s:UpdateFileTemplate()
augroup END

augroup filetype_clang
    autocmd!
    autocmd BufNewFile *.h,*.c call s:AddFileTemplate('c')
    autocmd BufWritePre *.h,*.c call s:UpdateFileTemplate()
    autocmd BufNewFile *.hpp,*.cpp,*.cc,*.cxx call s:AddFileTemplate('cpp')
    autocmd BufWritePre *.hpp,*.cpp,*.cc,*.cxx call s:UpdateFileTemplate()

    if s:enhanced
        call s:AddReformatLang(['c', 'cpp'])
        autocmd FileType c,cpp setlocal formatprg=clang\-format\ \-style=\"\{BasedOnStyle:\ Google,\ IndentWidth:\ 4\}\"
        " autocmd BufWritePre *.h,*.c,*.cpp call Reformat()
    endif
augroup END

augroup filetype_golang
    autocmd!
    if s:enhanced
        call s:AddReformatLang('go')
        autocmd FileType go setlocal formatprg=gofmt
        autocmd FileType go nnoremap <F9> :Shell build %<CR>
        autocmd FileType go nnoremap <F10> :Shell go run %<CR>
        autocmd BufWritePre *.go call Reformat()
    endif
augroup END

augroup filetype_html
    autocmd!
    if s:enhanced
        autocmd FileType html,css EmmetInstall
        call s:AddReformatLang(['html', 'css'])
        autocmd FileType html setlocal formatprg=js\-beautify\ \-\-type\ html
        autocmd FileType css setlocal formatprg=js\-beautify\ \-\-type\ css
    endif
augroup END

augroup filetype_javascript
    autocmd!
    if s:enhanced
        call s:AddReformatLang('javascript')
        autocmd FileType javascript setlocal formatprg=js\-beautify
        autocmd BufWritePre *.js call Reformat()
    endif
augroup END

" ================
" }}}
" ================

" ================
" Custom functions. {{{
" ================
function! s:AddReformatLang(filetypes)
    if (type(a:filetypes) == 3) " expect list
        call extend(s:format_filetypes, a:filetypes)
    elseif (type(a:filetypes) == 1) " expect string
        call add(s:format_filetypes, a:filetypes)
    endif
endfunction

function! Reformat()
    if (index(s:format_filetypes, &filetype) >= 0)
        " mark current location
        silent! normal! mm
        " format all
        silent! normal! gggqG
        " move cursor back
        silent! normal! 'm
        " clear mark
        silent! execute 'delmarks m'
        " center current line
        silent! normal! zz
    endif
endfunction

" capture shell output and display in a window.
function! s:ExecuteInShell(command)
    let l:command = join(map(split(a:command), 'expand(v:val)'))
    let l:winnr = bufwinnr('^' . l:command . '$')
    silent! execute  l:winnr < 0 ? 'botright new ' . fnameescape(l:command) : l:winnr . 'wincmd w'
    setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
    echo 'Execute ' . l:command . '...'
    silent! execute 'silent %!'. l:command
    silent! execute 'resize ' . max([line('$'), 5])
    silent! redraw
    silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
    " silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . l:command . ''')<CR>'
    echo 'Shell command ' . l:command . ' executed.'
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)

function! s:AddFileTemplate(filetype)
    let l:template = '~/.vim/templates/' . a:filetype . '.template'
    let l:writecmd = '0read ' . l:template
    silent! execute l:writecmd

    let l:exec_line = '1,' . min([line('$'), 10])
    let l:eval_regex = '\[:VIM_EVAL:\](.+)\[:END_EVAL:\]'
    let l:eval_func = '\=eval(submatch(1))'
    let l:execcmd = l:exec_line . 's/\v\C' . l:eval_regex . '/' . l:eval_func . '/g'
    silent! execute l:execcmd
endfunction

function! s:ManualAddFileTemplate()
    silent! call s:AddFileTemplate(&filetype)
endfunction

function! s:UpdateFileTemplate()
    let l:exec_line = '1,' . min([line('$'), 10])
    let l:modify_regex = '(Last Modified: )@<=([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})'
    let l:eval_func = '\=eval("strftime(\"%Y-%m-%d %H:%M:%S\")")'
    silent! normal! mm
    silent! execute l:exec_line . 's/\v\C' . l:modify_regex . '/' . l:eval_func . '/'
    silent! normal! 'm
    silent! execute 'delmarks m'
    silent! normal! zz
endfunction

" ================
" }}}
" ================
